@model FrontEnd.Models.ViewModel.HomeViewModel

@{
    ViewData["Title"] = "Home Page";
}
<link rel="stylesheet" href="/css/Home.css">


	
	<div id="main">


		<div class="clearfix"></div>
		<br />

		<div class="col-div-3">
			<div class="box">
			<p>
				@(Model.Nalunos ?? 0)
				<br /><span>Alunos</span>
			</p>
				<i class="fa fa-graduation-cap box-icon"></i>
			</div>
		</div>
		<div class="col-div-3">
			<div class="box">
			<p>
				@(Model.NTrabalhos ?? 0)
				<br /><span>Trabalhos</span>
			</p>
				<i class="fa fa-list box-icon"></i>
			</div>
		</div>
		<div class="col-div-3">
			<div class="box">
			<p>
				@(Model.Nmenbros ?? 0)
				<br /><span>Membros</span>
			</p>
				<i class="fa fa-users box-icon"></i>
			</div>
		</div>
		<div class="col-div-3">
			<div class="box">
			<p>
				@if (Model.DataMaisProxima != null)
				{
                    @Model.DataMaisProxima.Value.ToString("dd/MM/yyyy")
                    
					<br /><span>Data Mais Proxima</span>
				}
				else
				{
					<br /><span>Sem Datas Marcadas</span>
				}
			</p>
			<i class="fa fa-calendar box-icon"></i>
			</div>
		</div>
		<div class="clearfix"></div>
		<br /><br />
		<div class="col-div-8">
			<div class="box-8">
				<div class="content-box">
				<p>Alunos <span> <a class="btn btn-sm" asp-controller="Alunos" asp-action="Index">Mostrar Tudo</a> </span></p>
					<br />
					@await Html.PartialAsync("List_Alunos.cshtml", Model.Alunos)

				</div>
			</div>
		</div>

		<div class="col-div-4">
			<div class="box-4">
				<div class="content-box">
                <p>Alunos por Ano <span><a class="btn btn-sm" asp-controller="Charts" asp-action="Index">Ir para Gráficos</a></span></p>
					<canvas id="alunosBar"></canvas>
			</div>
			</div>
		</div>

		<div class="clearfix"></div>

		<div class="col-div-8">
			<div class="box-8">
				<div class="content-box">
					<p>Trabalhos <span> <a class="btn btn-sm" asp-controller="Trabalhos" asp-action="Index">Mostrar Tudo</a> </span></p>
					<br />
					@await Html.PartialAsync("List_Trabalhos.cshtml", Model.Trabalhos)

				</div>
			</div>
		</div>
		
		<div class="col-div-4">
			<div class="box-4">
				<div class="content-box">
                <p>Trabalhos por Tipo<span><a class="btn btn-sm" asp-controller="Charts" asp-action="Index">Ir para Gráficos</a></span></p>
					<canvas id="trabalhosBar"></canvas>
			</div>
			</div>
		</div>

	</div>


<script>
    const trabalhosBar = document.getElementById('trabalhosBar');
    const tipoLabels = @Html.Raw(Json.Serialize(Model.Tipos));
    const tipoData = @Html.Raw(Json.Serialize(Model.TipoN));
    const tipoColorPalette = generateColorPalette(tipoLabels.length);

    new Chart(trabalhosBar, {
        type: 'bar',
        data: {
            labels: tipoLabels,
            datasets: [{
                label: 'Quantidade',
                data: tipoData,
                backgroundColor: tipoColorPalette.backgroundColors,
                borderColor: tipoColorPalette.borderColors,
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        }
    });

    const alunosBar = document.getElementById('alunosBar');
    const anosLabels = @Html.Raw(Json.Serialize(Model.Anos));
    const anosData = @Html.Raw(Json.Serialize(Model.AnosN));
    const anosColorPalette = generateColorPalette(anosLabels.length);

    new Chart(alunosBar, {
        type: 'bar',
        data: {
            labels: anosLabels,
            datasets: [{
                label: 'Quantidade',
                data: anosData,
                backgroundColor: anosColorPalette.backgroundColors,
                borderColor: anosColorPalette.borderColors,
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        }
    });

    function generateColorPalette(count) {
        const backgroundColors = [];
        const borderColors = [];

        for (let i = 0; i < count; i++) {
            const backgroundColor = getRandomColor();
            const borderColor = darkenColor(backgroundColor);

            backgroundColors.push(backgroundColor);
            borderColors.push(borderColor);
        }

        return { backgroundColors, borderColors };
    }

    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';

        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }

        return color;
    }

    function darkenColor(color) {
        // Calculate darker color using a color library or algorithm
        // Here's a simple example using HSL color model:
        const hslColor = rgbToHsl(colorToRgb(color));
        const darkenedHslColor = [hslColor[0], hslColor[1], hslColor[2] - 0.1];
        const darkenedRgbColor = hslToRgb(darkenedHslColor);

        return rgbToHex(darkenedRgbColor);
    }

    function colorToRgb(color) {
        const hex = color.replace('#', '');
        const bigint = parseInt(hex, 16);

        const r = (bigint >> 16) & 255;
        const g = (bigint >> 8) & 255;
        const b = bigint & 255;

        return [r, g, b];
    }

    function rgbToHsl(rgb) {
        const [r, g, b] = rgb;

        const min = Math.min(r, g, b);
        const max = Math.max(r, g, b);
        const delta = max - min;

        let h = 0;
        let s = 0;
        let l = (min + max) / 2;

        if (delta !== 0) {
            s = l > 0.5 ? delta / (2 - max - min) : delta / (max + min);

            if (max === r) {
                h = (g - b) / delta + (g < b ? 6 : 0);
            } else if (max === g) {
                h = (b - r) / delta + 2;
            } else {
                h = (r - g) / delta + 4;
            }

            h /= 6;
        }

        return [h, s, l];
    }

    function hslToRgb(hsl) {
        const [h, s, l] = hsl;

        let r, g, b;

        if (s === 0) {
            r = g = b = l;
        } else {
            const hue2rgb = (p, q, t) => {
                if (t < 0) t += 1;
                if (t > 1) t -= 1;
                if (t < 1 / 6) return p + (q - p) * 6 * t;
                if (t < 1 / 2) return q;
                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
                return p;
            };

            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            const p = 2 * l - q;

            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }

        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
    }

    function rgbToHex(rgb) {
        const [r, g, b] = rgb;
        return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
    }
</script>
