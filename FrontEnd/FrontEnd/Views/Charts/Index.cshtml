@model FrontEnd.Models.ViewModel.ChartsViewModel

@{
    ViewData["Title"] = "Home Page";
}
<link rel="stylesheet" href="/css/Chart.css">

<div id="main">

    <div class="clearfix"></div>
    <br />

    <div class="col-div-3">
        <div class="box">
            <p>
                @(Model.Nalunos ?? 0)
                <br /><span>Alunos</span>
            </p>
            <i class="fa fa-graduation-cap box-icon"></i>
        </div>
    </div>
    <div class="col-div-3">
        <div class="box">
            <p>
                @(Model.NTrabalhos ?? 0)
                <br /><span>Trabalhos</span>
            </p>
            <i class="fa fa-list box-icon"></i>
        </div>
    </div>
    <div class="col-div-3">
        <div class="box">
            <p>
                @(Model.Nmenbros ?? 0)
                <br /><span>Membros</span>
            </p>
            <i class="fa fa-users box-icon"></i>
        </div>
    </div>
    <div class="col-div-3">
        <div class="box">
            <p>
                @(Model.Nempresas ?? 0)
                <br /><span>Empresas</span>
            </p>
            <i class="fas fa-briefcase box-icon"></i>
        </div>
    </div>
    <div class="clearfix"></div>

    <div class="col-div-4">
        <div class="box-4">
            <div class="content-box">
                <p>Alunos por Instituição</p>
                <div class="controls">
                    <h5 class="label">Escolher Tipo</h5>
                    <select name="chartType1" id="chartType1" onchange="updateChartType()">
                        <option value="line">Line</option>
                        <option value="bar">Bar</option>
                        <option value="radar">Radar</option>
                        <option value="polarArea">Polar Area</option>
                        <option value="doughnut">Doughnut</option>
                    </select>
                </div>
                <canvas id="Chart1" class="max"></canvas>
            </div>
        </div>
    </div>

    <div class="col-div-4">
        <div class="box-4">
            <div class="content-box">
                <p>Trabalhos por Tipo</p>
                <div class="controls">
                <h5 class="label">Escolher Tipo</h5>
                    <select name="Merda" id="chartType2" onchange="updateChartType2()">
                        <option value="line">Line</option>
                        <option value="bar">Bar</option>
                        <option value="radar">Radar</option>
                        <option value="polarArea">Polar Area</option>
                        <option value="doughnut">Doughnut</option>
                    </select>
                </div>
                <canvas id="Chart2" class="max"></canvas>
            </div>
        </div>
    </div>

    <div class="col-div-4">
        <div class="box-4">
            <div class="content-box">
                <p>Alunos por Ano</p>
                <div class="controls">
                <h5 class="label">Escolher Tipo</h5>
                    <select name="ChartType" id="chartType3" onchange="updateChartType3()">
                        <option value="line">Line</option>
                        <option value="bar">Bar</option>
                        <option value="radar">Radar</option>
                        <option value="polarArea">Polar Area</option>
                        <option value="doughnut">Doughnut</option>
                    </select>
                </div>
                <canvas id="Chart3" class="max"></canvas>
            </div>
        </div>
    </div>

    <div class="clearfix"></div>

    <div class="col-div-4">
        <div class="box-4">
            <div class="content-box">
                <p>Média das Notas por Ano</p>
                <div class="controls">
                    <h5 class="label">Escolher Tipo</h5>
                    <select name="ChartType" id="chartType4" onchange="updateChartType4()">
                        <option value="line">Line</option>
                        <option value="bar">Bar</option>
                        <option value="radar">Radar</option>
                        <option value="polarArea">Polar Area</option>
                        <option value="doughnut">Doughnut</option>
                    </select>
                </div>
                <canvas id="Chart4" class="max"></canvas>
            </div>
        </div>
    </div>

    <div class="col-div-4">
        <div class="box-4">
            <div class="content-box">
                <p>Percentagem de defendidos por Ano</p>
                <div class="controls">
                    <h5 class="label">Escolher Tipo</h5>
                    <select name="ChartType" id="chartType5" onchange="updateChartType5()">
                        <option value="line">Line</option>
                        <option value="bar">Bar</option>
                        <option value="radar">Radar</option>
                        <option value="polarArea">Polar Area</option>
                        <option value="doughnut">Doughnut</option>
                    </select>
                </div>
                <canvas id="Chart5" class="max"></canvas>
            </div>
        </div>
    </div>

    <div class="col-div-4">
        <div class="box-4">
            <div class="content-box">
                <p>Nº de defendidos por Ano</p>
                <div class="controls">
                    <h5 class="label">Escolher Tipo</h5>
                    <select name="ChartType" id="chartType6" onchange="updateChartType6()">
                        <option value="line">Line</option>
                        <option value="bar">Bar</option>
                        <option value="radar">Radar</option>
                        <option value="polarArea">Polar Area</option>
                        <option value="doughnut">Doughnut</option>
                    </select>
                </div>
                <canvas id="Chart6" class="max"></canvas>
            </div>
        </div>
    </div>


</div>

<script>
//----------------------------------------- N alunos por Instituições-------------------------------------
const chart1Labels = @Html.Raw(Json.Serialize(Model.Intituicao));
const chart1Data = @Html.Raw(Json.Serialize(Model.IntituicaoN));
const chart1ColorPalette = generateColorPalette(chart1Labels.length);

const myData1 = {
    labels: chart1Labels,
    datasets: [{
        label: 'Quantidade',
        data: chart1Data,
        backgroundColor: chart1ColorPalette.backgroundColors,
        borderColor: chart1ColorPalette.borderColors,
        borderWidth: 1
    }]
};



// Default chart defined with type: 'line'
    var ctx1 = document.getElementById('Chart1').getContext('2d');
    var Chart1 = new Chart(ctx1, {
    type: 'line',
    data: myData1,
});

// Function runs on chart type select update
    function updateChartType() {
    // Since you can't update chart type directly in Charts JS, you must destroy the original chart and rebuild it
    Chart1.destroy();
    Chart1 = new Chart(ctx1, {
        type: document.getElementById("chartType1").value,
        data: myData1,
    });
}


    //----------------------------------------- N Tipos de Trabalho-------------------------------------

    const chart2Labels = @Html.Raw(Json.Serialize(Model.Tipos));
    const chart2Data = @Html.Raw(Json.Serialize(Model.TipoN));
    const chart2ColorPalette = generateColorPalette(chart2Labels.length);

    const myData2 = {
        labels: chart2Labels,
        datasets: [{
            label: 'Quantidade',
            data: chart2Data,
            backgroundColor: chart2ColorPalette.backgroundColors,
            borderColor: chart2ColorPalette.borderColors,
            borderWidth: 1
        }]
    };



    // Default chart defined with type: 'line'
    var ctx2 = document.getElementById('Chart2').getContext('2d');
    var Chart2 = new Chart(ctx2, {
        type: 'line',
        data: myData2,
    });

    // Function runs on chart type select update
    function updateChartType2() {
        // Since you can't update chart type directly in Charts JS, you must destroy the original chart and rebuild it
        Chart2.destroy();
        Chart2 = new Chart(ctx2, {
            type: document.getElementById("chartType2").value,
            data: myData2,
        });
    }
    //----------------------------------------- N alunos por Ano-------------------------------------

    const chart3Labels = @Html.Raw(Json.Serialize(Model.Anos));
    const chart3Data = @Html.Raw(Json.Serialize(Model.AnosN));
    const chart3ColorPalette = generateColorPalette(chart3Labels.length);

    const myData3 = {
        labels: chart3Labels,
        datasets: [{
            label: 'Quantidade',
            data: chart3Data,
            backgroundColor: chart3ColorPalette.backgroundColors,
            borderColor: chart3ColorPalette.borderColors,
            borderWidth: 1
        }]
    };



    // Default chart defined with type: 'line'
    var ctx3 = document.getElementById('Chart3').getContext('2d');
    var Chart3 = new Chart(ctx3, {
        type: 'line',
        data: myData3,
    });

    // Function runs on chart type select update
    function updateChartType3() {
        // Since you can't update chart type directly in Charts JS, you must destroy the original chart and rebuild it
        Chart3.destroy();
        Chart3 = new Chart(ctx3, {
            type: document.getElementById("chartType3").value,
            data: myData3,
        });
    }
    //----------------------------------------- Média das Notas por Ano-------------------------------------

    const chart4Labels = @Html.Raw(Json.Serialize(Model.meanNotaAnos));
    const chart4Data = @Html.Raw(Json.Serialize(Model.meanNotaPerAno));
    const chart4ColorPalette = generateColorPalette(chart4Labels.length);

    const myData4 = {
        labels: chart4Labels,
        datasets: [{
            label: 'Média',
            data: chart4Data,
            backgroundColor: chart4ColorPalette.backgroundColors,
            borderColor: chart4ColorPalette.borderColors,
            borderWidth: 1
        }]
    };

    // Default chart defined with type: 'line'
    var ctx4 = document.getElementById('Chart4').getContext('2d');
    var Chart4 = new Chart(ctx4, {
        type: 'line',
        data: myData4,
    });

    // Function runs on chart type select update
    function updateChartType4() {
        // Since you can't update chart type directly in Charts JS, you must destroy the original chart and rebuild it
        Chart4.destroy();
        Chart4 = new Chart(ctx4, {
            type: document.getElementById("chartType4").value,
            data: myData4,
        });
    }

    //----------------------------------------- % Defendidos -------------------------------------

    const chart5Labels = @Html.Raw(Json.Serialize(Model.meanNotaAnos));
    const chart5Data = @Html.Raw(Json.Serialize(Model.Pdefendidos));
    const chart5ColorPalette = generateColorPalette(chart5Labels.length);

    const myData5 = {
        labels: chart5Labels,
        datasets: [{
            label: '%',
            data: chart5Data,
            backgroundColor: chart5ColorPalette.backgroundColors,
            borderColor: chart5ColorPalette.borderColors,
            borderWidth: 1
        }]
    };

    // Default chart defined with type: 'line'
    var ctx5 = document.getElementById('Chart5').getContext('2d');
    var Chart5 = new Chart(ctx5, {
        type: 'line',
        data: myData5,
    });

    // Function runs on chart type select update
    function updateChartType5() {
        // Since you can't update chart type directly in Charts JS, you must destroy the original chart and rebuild it
        Chart5.destroy();
        Chart5 = new Chart(ctx5, {
            type: document.getElementById("chartType5").value,
            data: myData5,
        });
    }


    //----------------------------------------- Nº Defendidos -------------------------------------

    const chart6Labels = @Html.Raw(Json.Serialize(Model.meanNotaAnos));
    const chart6Data = @Html.Raw(Json.Serialize(Model.Ndefendidos));
    const chart6ColorPalette = generateColorPalette(chart6Labels.length);

    const myData6 = {
        labels: chart6Labels,
        datasets: [{
            label: 'Quantidade',
            data: chart6Data,
            backgroundColor: chart6ColorPalette.backgroundColors,
            borderColor: chart6ColorPalette.borderColors,
            borderWidth: 1
        }]
    };

    // Default chart defined with type: 'line'
    var ctx6 = document.getElementById('Chart6').getContext('2d');
    var Chart6 = new Chart(ctx6, {
        type: 'line',
        data: myData6,
    });

    // Function runs on chart type select update
    function updateChartType6() {
        // Since you can't update chart type directly in Charts JS, you must destroy the original chart and rebuild it
        Chart6.destroy();
        Chart6 = new Chart(ctx6, {
            type: document.getElementById("chartType6").value,
            data: myData6,
        });
    }

    //_---------------------------------------------------------------Cores---------------------------------------------------------

    function generateColorPalette(count) {
        const backgroundColors = [];
        const borderColors = [];

        for (let i = 0; i < count; i++) {
            const backgroundColor = getRandomColor();
            const borderColor = darkenColor(backgroundColor);

            backgroundColors.push(backgroundColor);
            borderColors.push(borderColor);
        }

        return { backgroundColors, borderColors };
    }

    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';

        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }

        return color;
    }

    function darkenColor(color) {
        // Calculate darker color using a color library or algorithm
        // Here's a simple example using HSL color model:
        const hslColor = rgbToHsl(colorToRgb(color));
        const darkenedHslColor = [hslColor[0], hslColor[1], hslColor[2] - 0.1];
        const darkenedRgbColor = hslToRgb(darkenedHslColor);

        return rgbToHex(darkenedRgbColor);
    }

    function colorToRgb(color) {
        const hex = color.replace('#', '');
        const bigint = parseInt(hex, 16);

        const r = (bigint >> 16) & 255;
        const g = (bigint >> 8) & 255;
        const b = bigint & 255;

        return [r, g, b];
    }

    function rgbToHsl(rgb) {
        const [r, g, b] = rgb;

        const min = Math.min(r, g, b);
        const max = Math.max(r, g, b);
        const delta = max - min;

        let h = 0;
        let s = 0;
        let l = (min + max) / 2;

        if (delta !== 0) {
            if (l < 0.5) {
                s = delta / (max + min);
            } else {
                s = delta / (2 - max - min);
            }

            if (r === max) {
                h = (g - b) / delta + (g < b ? 6 : 0);
            } else if (g === max) {
                h = (b - r) / delta + 2;
            } else {
                h = (r - g) / delta + 4;
            }

            h /= 6;
        }

        return [h, s, l];
    }

    function hslToRgb(hsl) {
        const [h, s, l] = hsl;

        let r, g, b;

        if (s === 0) {
            r = g = b = l;
        } else {
            const hue2rgb = (p, q, t) => {
                if (t < 0) t += 1;
                if (t > 1) t -= 1;
                if (t < 1 / 6) return p + (q - p) * 6 * t;
                if (t < 1 / 2) return q;
                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
                return p;
            };

            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            const p = 2 * l - q;

            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }

        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
    }

    function rgbToHex(rgb) {
        const [r, g, b] = rgb;
        return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
    }
</script>
